# -*- coding: utf-8 -*-
"""Stock_Price_Prediction1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Sujitha-2726/Stock_Price_Prediction_lstm/blob/main/Stock_Price_Prediction1.ipynb
"""

import streamlit as st
import yfinance as yf
import datetime as dt
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from sklearn.preprocessing import MinMaxScaler
from keras.layers import Dense, Dropout, LSTM
from keras.models import Sequential

stock = "AAPL"
data = yf.download(stock, start=str("2015-01-01"), end=str("2025-11-01"))
data = data.reset_index()

data.shape

data.info()

data = data.reset_index()

data.to_csv("aapl.csv", index=False)

plt.figure(figsize=(12, 6))
plt.plot(data['Close'], label=f'{stock} Closing Price', linewidth=2)
plt.title(f'{stock} Closing prices over time')
plt.xlabel('Date')
plt.ylabel('Closing Price (USD)')
plt.legend()
st.pyplot(plt.gcf())

plt.figure(figsize=(12, 6))
plt.plot(data['Open'], label=f'{stock} Opening Price', linewidth=2)
plt.title(f'{stock} Opening prices over time')
plt.xlabel('Date')
plt.ylabel('Opening Price (USD)')
plt.legend()
st.pyplot(plt.gcf())

plt.figure(figsize=(12, 6))
plt.plot(data['High'], label=f'{stock} High Price', linewidth=2)
plt.title(f'{stock} High prices over time')
plt.xlabel('Date')
plt.ylabel('High Price (USD)')
plt.legend()
st.pyplot(plt.gcf())

plt.figure(figsize=(12, 6))
plt.plot(data['Low'], label=f'{stock} Low Price', linewidth=2)
plt.title(f'{stock} Low prices over time')
plt.xlabel('Date')
plt.ylabel('Low Price (USD)')
plt.legend()
st.pyplot(plt.gcf())

plt.figure(figsize=(12, 6))
plt.plot(data['Volume'], label=f'{stock} Volume ', linewidth=2)
plt.title(f'{stock} Volume over time')
plt.xlabel('Date')
plt.ylabel('Volume (USD)')
plt.legend()
st.pyplot(plt.gcf())

# Candlestick
fig = go.Figure(data=[go.Candlestick(x=data['Date'], open=data['Open'], high=data['High'], low=data['Low'], close=data['Close'])])
fig.update_layout(xaxis_rangeslider_visible=False, title=f'{stock} Candlestick Chart')
st.plotly_chart(fig)

# Training and Testing
split=st.slider('Training data ratio', min_value=0.5, max_value=0.9, value=0.7)
train_idx = int(len(data) * split) 
data_training = pd.DataFrame(data['Close'][:train_idx])
data_testing = pd.DataFrame(data['Close'][train_idx:])
st.write("Training Data Sample", data_training.head())
st.write("Testing Data Sample", data_testing.head()) 

# Scale the Training Data
scaler = MinMaxScaler(feature_range=(0, 1))
data_training_array = scaler.fit_transform(data_training)

x_train = []
y_train = []
for i in range(100, data_training_array.shape[0]):
    x_train.append(data_training_array[i-100: i])
    y_train.append(data_training_array[i, 0])
x_train, y_train = np.array(x_train), np.array(y_train)

# Model Building
from keras.layers import Input, Dense, Dropout, LSTM
from keras.models import Sequential

model = Sequential()

# Use the Input layer as the first layer
model.add(Input(shape=(x_train.shape[1], 1)))

# Add the first LSTM layer without the input_shape argument
model.add(LSTM(units=50, activation='relu', return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=60, activation='relu', return_sequences=True))
model.add(Dropout(0.3))

model.add(LSTM(units=80, activation='relu', return_sequences=True))
model.add(Dropout(0.4))

model.add(LSTM(units=120, activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(units=1))

st.write("Compiling and training the model...")
epochs = st.slider('Number of epochs', 10, 200, 50)
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(x_train, y_train, epochs=epochs)
st.write('Model training complete')

# Preparing test data for prediction
past_100_days = data_training.tail(100)
final_df = pd.concat([past_100_days, data_testing], ignore_index=True)

input_data = scaler.fit_transform(final_df)
x_test = []
y_test = []
for i in range(100, input_data.shape[0]):
    x_test.append(input_data[i-100:i])
    y_test.append(input_data[i, 0])
x_test, y_test = np.array(x_test), np.array(y_test)

# Make Predictions
y_predicted = model.predict(x_test)
scale_factor = 1 / scaler.scale_[0]
y_predicted = y_predicted * scale_factor
y_test = y_test * scale_factor

# Visualize Results
plt.figure(figsize=(12, 6))
plt.plot(y_test, 'b', label='Original Price')
plt.plot(y_predicted, 'r', label='Predicted Price')
plt.title('Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
st.pyplot(plt.gcf())

model.save('Stock_Price_Prediction1.keras')
